// SCSS variables are information about icon's compiled state, stored under its original file name
//
// .icon-home {
//   width: $icon-home-width;
// }
//
// The large array-like variables contain all information about a single icon
// $icon-home: x y offset_x offset_y width height total_width total_height image_path;
//
// At the bottom of this section, we provide information about the spritesheet itself
// $spritesheet: width height image $spritesheet-sprites;
$calendar-active-name: 'calendar-active';
$calendar-active-x: 26px;
$calendar-active-y: 0px;
$calendar-active-offset-x: -26px;
$calendar-active-offset-y: 0px;
$calendar-active-width: 22px;
$calendar-active-height: 19px;
$calendar-active-total-width: 70px;
$calendar-active-total-height: 32px;
$calendar-active-image: 'sprite.png';
$calendar-active: (26px, 0px, -26px, 0px, 22px, 19px, 70px, 32px, 'sprite.png', 'calendar-active', );
$calendar-name: 'calendar';
$calendar-x: 48px;
$calendar-y: 0px;
$calendar-offset-x: -48px;
$calendar-offset-y: 0px;
$calendar-width: 22px;
$calendar-height: 19px;
$calendar-total-width: 70px;
$calendar-total-height: 32px;
$calendar-image: 'sprite.png';
$calendar: (48px, 0px, -48px, 0px, 22px, 19px, 70px, 32px, 'sprite.png', 'calendar', );
$place-name: 'place';
$place-x: 0px;
$place-y: 0px;
$place-offset-x: 0px;
$place-offset-y: 0px;
$place-width: 26px;
$place-height: 32px;
$place-total-width: 70px;
$place-total-height: 32px;
$place-image: 'sprite.png';
$place: (0px, 0px, 0px, 0px, 26px, 32px, 70px, 32px, 'sprite.png', 'place', );
$spritesheet-width: 70px;
$spritesheet-height: 32px;
$spritesheet-image: 'sprite.png';
$spritesheet-sprites: ($calendar-active, $calendar, $place, );
$spritesheet: (70px, 32px, 'sprite.png', $spritesheet-sprites, );

// The provided mixins are intended to be used with the array-like variables
//
// .icon-home {
//   @include sprite-width($icon-home);
// }
//
// .icon-email {
//   @include sprite($icon-email);
// }
//
// Example usage in HTML:
//
// `display: block` sprite:
// <div class="icon-home"></div>
//
// To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:
//
// // CSS
// .icon {
//   display: inline-block;
// }
//
// // HTML
// <i class="icon icon-home"></i>
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(../img/pngsprite/#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

// The `sprites` mixin generates identical output to the CSS template
//   but can be overridden inside of SCSS
//
// @include sprites($spritesheet-sprites);
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
